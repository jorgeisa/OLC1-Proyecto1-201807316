/*
 * Regexive Sintactico
 * Isaac
 */

package Analizador;
import java_cup.runtime.*;
import java.util.ArrayList;
import Clases.Excepcion;
import Clases.Enum;

parser code 
{:
    public ArrayList<Excepcion> Excepciones = new ArrayList();
    Enum enumError;
    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        Excepciones.add(new Excepcion(enumError.SINTACTICO, "Caracter no valido, error sintactico: "+ s.value, s.left, s.right));
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
    } 

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
    }  
:} 


terminal String PORCENTAJES,SALTOLINEA,COMILLASIMPLE,COMILLADOBLE;
terminal String CONCATENACION,DISYUNCION,CEROMASVECES,UNAMASVECES,CEROUNAVEZ;
terminal String RCONJUNTO,LLAVEABRIR,LLAVECERRAR,CONJUNTOGUION,CONJUNTOCOMA;
terminal String PUNTOCOMA,DOSPUNTOS,FLECHAASIGNAR;

terminal String LETRA,DIGITO,ASCIIS,ID, CADENA;

non terminal ini;
non terminal instruccion;
non terminal instruccionInicial;

non terminal bloqueUno;
non terminal instruccionBUno;
non terminal conjunto;
non terminal notacionConjunto;
non terminal conjuntoEr;
non terminal notacionEr;
/*non terminal erDoble;
non terminal erSimple;
non terminal erTerminal;*/

non terminal bloqueDos;
non terminal instruccionBDos;

precedence left CONJUNTOGUION,CONJUNTOCOMA;

start with ini;

ini::= instruccion
;

instruccion::= instruccionInicial
 | error instruccion
;

instruccionInicial::= LLAVEABRIR bloqueUno PORCENTAJES PORCENTAJES bloqueDos LLAVECERRAR
;

bloqueUno ::= instruccionBUno bloqueUno 
 | instruccionBUno
 | error bloqueUno
;

instruccionBUno ::= conjunto 
 | conjuntoEr
;

conjunto ::= RCONJUNTO DOSPUNTOS ID FLECHAASIGNAR:b notacionConjunto:a PUNTOCOMA:c {:System.out.println("El valor de la expresión es: "+b+" " + a + " "+c);:}
;

notacionConjunto ::= notacionConjunto:a CONJUNTOGUION notacionConjunto:b {:RESULT=a + "~" + b;:}
 | notacionConjunto:a CONJUNTOCOMA notacionConjunto:b {:RESULT=a + "," + b;:}
 | DIGITO:a {:RESULT=new String(a);:}
 | LETRA:a {:RESULT=new String(a);:}
 | ASCIIS:a {:RESULT=new String(a);:}
;

conjuntoEr ::= ID:a FLECHAASIGNAR:b notacionEr:c PUNTOCOMA:d {:System.out.println("El valor de la expresion es: "+a+" "+b+" "+c+" "+d);:}
;

notacionEr::= CONCATENACION:a notacionEr:b notacionEr:c {:RESULT=a+b+c;:}
 | DISYUNCION:a notacionEr:b notacionEr:c {:RESULT=a+b+c;:}
 | UNAMASVECES:a notacionEr:b {:RESULT=a+b;:}
 | CEROUNAVEZ:a notacionEr:b {:RESULT=a+b;:}
 | CEROMASVECES:a notacionEr:b {:RESULT=a+b;:}
 | CADENA:a {:RESULT=a;:}
 | LLAVEABRIR:a ID:b LLAVECERRAR:c {:RESULT=a+b+c;:}
 | SALTOLINEA:a {:RESULT=a;:}
 | COMILLASIMPLE:a {:RESULT=a;:}
 | COMILLADOBLE:a {:RESULT=a;:}
; 

/*erDoble::= CONCATENACION:a notacionEr:b notacionEr:c {:RESULT=a+b+c;:}
 | DISYUNCION:a notacionEr:b notacionEr:c {:RESULT=a+b+c;:}
;*/

/*erSimple::= CEROMASVECES:a notacionEr:b {:RESULT=a+b;:}
| UNAMASVECES:a notacionEr:b {:RESULT=a+b;:}
| CEROUNAVEZ:a notacionEr:b {:RESULT=a+b;:}
;*/

/*erTerminal::= LLAVEABRIR:a ID:b LLAVECERRAR:c {:RESULT=a+b+c;:}
| CADENA:a {:RESULT=a;:}
| SALTOLINEA:a {:RESULT=a;:}
| COMILLASIMPLE:a {:RESULT=a;:}
| COMILLADOBLE:a {:RESULT=a;:}
;*/

bloqueDos::=instruccionBDos bloqueDos 
 | instruccionBDos
 | error bloqueDos
;

instruccionBDos::= ID:a DOSPUNTOS:b CADENA:c PUNTOCOMA:d {:System.out.println("El valor de la expresión es: "+a+b+c+d);:}
;